name: 'Apply External Terraform Configuration'

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

concurrency:
  group: terraform-${{ github.ref }}
  cancel-in-progress: true

jobs:
  terraform:
    name: 'Terraform Apply'
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - name: Checkout Current Repository
        uses: actions/checkout@v4

      - name: Clone External Terraform Repository
        run: |
          git clone https://github.com/DiomedesAuRaa/aws-terraform-stack.git

      - name: Verify Cloned Files
        run: ls -la aws-terraform-stack/eks
 
      - name: Create terraform.tfvars
        working-directory: aws-terraform-stack/eks
        run: |
          cat > terraform.tfvars <<EOF
          aws_access_key = "${{ secrets.AWS_ACCESS_KEY_ID }}"
          aws_secret_key = "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
          region         = "us-east-1"
          EOF
          
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: latest

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ secrets.AWS_ROLE_NAME }}
          aws-region: us-east-1

      - name: Initialize Terraform
        working-directory: aws-terraform-stack/eks
        run: terraform init

      - name: Terraform Plan
        run: |
          cd aws-terraform-stack/eks 
          terraform plan -out=tfplan
        continue-on-error: true  # This allows the job to continue even if `plan` fails

      - name: Show Terraform Plan Output (Debugging)
        if: failure()  # Only runs if the previous step fails
        run: |
          echo "Terraform plan failed, printing debug information..."
          terraform plan

      - name: Force Unlock Terraform State (if locked after plan)
        run: |
          LOCK_ID=$(terraform state list | grep -o 'terraform.tfstate.lock.info' || echo "")
          if [ -n "$LOCK_ID" ]; then
            echo "Lock found after plan, attempting to force-unlock..."
            terraform force-unlock $LOCK_ID
          else
            echo "No lock found after plan, skipping unlock."
          fi
        continue-on-error: true

      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan
        if: success()  # Only runs if `terraform plan` was successful

      # Force Unlock (if needed)
      - name: Force Unlock Terraform State (if locked after apply)
        run: |
          LOCK_ID=$(terraform state list | grep -o 'terraform.tfstate.lock.info' || echo "")
          if [ -n "$LOCK_ID" ]; then
            echo "Lock found after apply, attempting to force-unlock..."
            terraform force-unlock $LOCK_ID
          else
            echo "No lock found, skipping unlock."
          fi
        continue-on-error: true
